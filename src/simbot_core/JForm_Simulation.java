package simbot_core;

import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Chattriya
 */
public final class JForm_Simulation extends javax.swing.JFrame {

    boolean isPause;
    public JForm_Simulation() {
        initComponents();
        isPause = false;
    }
    
    public void setENV(AbstractEnvironment env) {
        this.mazePanel.setENV(env);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLog = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbRunningStep = new javax.swing.JLabel();
        lbSmellDirection = new javax.swing.JLabel();
        irPanel = new simbot_core.JPanel_IRsensor();
        mazePanel = new simbot_core.JPanel_Maze();
        menuBar = new javax.swing.JMenuBar();
        menuExit = new javax.swing.JMenu();
        menuFreezeDisplay = new javax.swing.JMenu();
        menuCredit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Running Steps: ");

        jLabel2.setText("Smell Direction: ");

        lbRunningStep.setText("0");

        lbSmellDirection.setText("0");

        javax.swing.GroupLayout panelLogLayout = new javax.swing.GroupLayout(panelLog);
        panelLog.setLayout(panelLogLayout);
        panelLogLayout.setHorizontalGroup(
            panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLogLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbRunningStep, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(lbSmellDirection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        panelLogLayout.setVerticalGroup(
            panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLogLayout.createSequentialGroup()
                .addGroup(panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(lbRunningStep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbSmellDirection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout irPanelLayout = new javax.swing.GroupLayout(irPanel);
        irPanel.setLayout(irPanelLayout);
        irPanelLayout.setHorizontalGroup(
            irPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );
        irPanelLayout.setVerticalGroup(
            irPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 130, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mazePanelLayout = new javax.swing.GroupLayout(mazePanel);
        mazePanel.setLayout(mazePanelLayout);
        mazePanelLayout.setHorizontalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 698, Short.MAX_VALUE)
        );
        mazePanelLayout.setVerticalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );

        menuExit.setText("Exit");
        menuExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuExitMouseClicked(evt);
            }
        });
        menuBar.add(menuExit);

        menuFreezeDisplay.setText("Freeze Display");
        menuFreezeDisplay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuFreezeDisplayMouseClicked(evt);
            }
        });
        menuBar.add(menuFreezeDisplay);

        menuCredit.setText("Credit");
        menuCredit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuCreditMouseClicked(evt);
            }
        });
        menuBar.add(menuCredit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mazePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(irPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mazePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelLog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(irPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Mouse clicked event to Freeze or Unfreeze the simulation.
     * @param evt 
     */
    private void menuFreezeDisplayMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuFreezeDisplayMouseClicked
        if(isPause)
        {
            isPause = false;
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    menuFreezeDisplay.setText("Freeze Display");
                }
            });
        }
        else
        {
            isPause = true;
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    menuFreezeDisplay.setText("Unfreeze Display");
                }
            });
        }
    }//GEN-LAST:event_menuFreezeDisplayMouseClicked

    /**
     * Mouse clicked event to stop the program.
     * @param evt 
     */
    private void menuExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_menuExitMouseClicked

    /**
     * Mouse clicked event to show the credit.
     * @param evt 
     */
    private void menuCreditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCreditMouseClicked
        JOptionPane.showMessageDialog(this, "This program was originally developed by Chattriya Jariyavajee.", "Creator", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_menuCreditMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private simbot_core.JPanel_IRsensor irPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lbRunningStep;
    private javax.swing.JLabel lbSmellDirection;
    private simbot_core.JPanel_Maze mazePanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu menuCredit;
    private javax.swing.JMenu menuExit;
    private javax.swing.JMenu menuFreezeDisplay;
    private javax.swing.JPanel panelLog;
    // End of variables declaration//GEN-END:variables

    /**
     * Draw the UI of 8 IR sensors.
     * @param evt 
     */
    public void drawIR(int[] irValues) {
        irPanel.drawIRValue(irValues);
    }

    /**
     * Draw robots in maze. 
     * @param robots
     */
    public void drawRobots(List<AbstractRobot> robots) {
        mazePanel.drawRobots(robots);
    }

    /**
     * Draw the number of countStep into the label
     * @param countStep
     */
    public void drawCountStep(int countStep) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                lbRunningStep.setText("" + countStep);
            }
        });
    }

    /**
     * Draw the number of smell direction into the label
     * @param direction
     */
    public void drawDirection(int[] direction) {
        SwingUtilities.invokeLater(() -> {
            lbSmellDirection.setText("" + Arrays.toString(direction));
        });
    }
    
    /**
     * 
     * @return check if the simulation is paused by user or not.
     */
    public boolean isPause() {
        return isPause;
    }
}
